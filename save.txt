import React, { Fragment } from "react";

// Redux stuff
import { legacy_createStore as createStore, combineReducers } from "redux";
// import { combineReducers, configureStore } from "@reduxjs/toolkit";
import listReducer from "./reducers/listReducer";
import modalReducer from "./reducers/modalReducer";
import { Provider, useSelector } from "react-redux";

// Components
import TodoForm from "./components/TodoForm";
import List from "./components/List";
import ModalEdit from "./components/ModalEdit";

const SAVED_ITEMS = "savedItems";

function saveState(state) {
    localStorage.setItem(SAVED_ITEMS, JSON.stringify(state.listReducer));
}

function loadState() {
    const actualState = localStorage.getItem(SAVED_ITEMS);
    if (actualState) {
        console.log();
        return JSON.parse(actualState);
    } else {
        return [];
    }
}

function Todo() {
    const allReducers = combineReducers({ listReducer, modalReducer });

    const store = createStore(allReducers, { listReducer: loadState() });

    // Esse metodo fica executando toda vez que o estado for modificado!
    store.subscribe(() => {
        saveState(store.getState());
    });

    return (
        <div className="container">
            <h1 className="todo-title">Todo List</h1>

            <Provider store={store}>
                <ModalEdit></ModalEdit>
                <TodoForm></TodoForm>
                <List></List>
            </Provider>

            {/*
                <Modal
                    onCancelEdit={onCancelEdit}
                    modalVisibility={modalVisibility}
                    item={editItem}
                ></Modal>
             */}
        </div>
    );
}

export default Todo;












import React from "react";
import ReactDOM from "react-dom/client";

// Components
import Todo from "./Todo";

// Styles
import "./index.css";

ReactDOM.createRoot(document.getElementById("root")).render(<Todo />);